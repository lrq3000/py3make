# SPDX-License-Identifier: MIT

[build-system]
# never uppercap requirements unless we have evidence it won't work https://iscinumpy.dev/post/bound-version-constraints/ 
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[project]  # beware if using setuptools: setup.py still gets executed, and even if pyproject.toml fields take precedence, if there is any code error in setup.py, building will fail!
name = "py3make"
dynamic = ["version"]  # see PEP 440 https://peps.python.org/pep-0440/#pre-releases and https://packaging.python.org/en/latest/guides/single-sourcing-package-version/
description = "Makefile execution powered by pure Python"
authors = [
    {name = "Stephen Karl Larroque", email = "LRQ3000@gmail.com"},
	{name = "Casper da Costa-Luis", email = "casper.dcl@physics.org"},
    ]
maintainers = [
    {name = "tqdm developers", email = "python.tqdm@gmail.com"},
    ]
requires-python = ">=3.7"
license = {text = "Mozilla Public License 2.0"} # { file = "LICENSE" }
keywords = ["make", "makefile", "gnumake", "gnu", "console", "terminal", "cli", "py3make", "pymake", "py-make"]
classifiers = [
    'Development Status :: 3 - Alpha',
    'License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)',
    'Environment :: Console',
	'Operating System :: MacOS :: MacOS X',
	'Operating System :: Microsoft :: Windows',
	'Operating System :: POSIX',
	'Operating System :: POSIX :: BSD',
	'Operating System :: POSIX :: BSD :: FreeBSD',
	'Operating System :: POSIX :: Linux',
	'Operating System :: POSIX :: SunOS/Solaris',
    'Intended Audience :: Developers',
    'Intended Audience :: System Administrators',
    'Programming Language :: Python',
    'Programming Language :: Python :: 3',
    'Programming Language :: Python :: 3.7',
    'Programming Language :: Python :: 3.8',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: Implementation :: PyPy',
	'Topic :: Software Development :: Build Tools',
	'Topic :: Software Development :: Libraries',
	'Topic :: Software Development :: Libraries :: Python Modules',
	'Topic :: Software Development :: Pre-processors',
	'Topic :: Software Development :: User Interfaces',
	'Topic :: System :: Installation/Setup',
	'Topic :: System :: Logging',
	'Topic :: System :: Monitoring',
	'Topic :: System :: Shells',
	'Topic :: Terminals',
	'Topic :: Utilities'
]
dependencies = [
	"docopt>=0.6.0",
]

[tool.setuptools.dynamic]
version = {attr = "py3make._version.__version__"}  # see: https://packaging.python.org/en/latest/guides/single-sourcing-package-version/

[project.urls]
Homepage = "https://github.com/lrq3000/py3make"
Documentation = "https://github.com/lrq3000/py3make/blob/master/README.md"
"Source" = "https://github.com/lrq3000/py3make"
Tracker = "https://github.com/lrq3000/py3make/issues"
Download = "https://github.com/lrq3000/py3make/releases"
Changelog = "https://allmychanges.com/p/python/py3make/"

[project.optional-dependencies]
test = [  # minimum dependencies to run tests
    "pytest",
    "pytest-cov",
	"coveralls",
	"flake8",
	"Flake8-pyproject",
]
testmeta = [  # dependencies to test meta-data
    "build",
    "twine",
    "validate-pyproject",
	"rstcheck",
]

[project.readme]
file = "README.rst"
content-type = "text/x-rst"

[project.scripts]
py3make = "py3make._main:main"

#[tool.setuptools]
#package-dir = {"" = "src"}

[tool.setuptools.packages.find]
# IMPORTANT: systematically delete `src/<project.name>.egg-info` folder before rebuilding, otherwise the list of included files will not get updated (it's in `SOURCES.txt` file in this folder)
where = ["src"]
include = ["py3make*"]
#namespaces = true  # already the default

[tool.setuptools.package-data]
# Check the <mypkg>.egg-info/SOURCES.txt file generated after a `build` or `pip install` to check if the following files are correctly included in the sdist.
# Check also the list of files included by default: https://packaging.python.org/en/latest/guides/using-manifest-in/
"*" = [
    "LICENSE*",
    "README*",
]

[tool.pytest.ini_options]
addopts = [
    "--import-mode=importlib",
    "-ra",
    "--strict-markers",
]
xfail_strict = true
testpaths = "tests"  # default path to look for tests if nothing is specified in commandline
filterwarnings = [
    "once::Warning",
]
required_plugins = "pytest-cov"

[tool.coverage.run]
branch = true
relative_files = true
include = [
    "*/*.py",
    ]

[tool.coverage.paths]
source = ["src"]

[tool.coverage.report]  # Beware: you need to delete .coveragerc if you have one, otherwise .coveragerc will take precedence!
show_missing = true
include = [
    "*/*.py",
]
omit = [
    "*/python?.?/*",
    "*/site-packages/nose/*",
    "*/opt/python/pypy*",
    "*/tests/*",
]
exclude_lines = [
    # a more strict default pragma
    "\\# pragma: no cover\\b",

    # allow defensive code
    "^\\s*raise AssertionError\\b",
    "^\\s*raise NotImplementedError\\b",
    "^\\s*return NotImplemented\\b",
    "^\\s*raise$",

    # typing-related code
    "^if (False|TYPE_CHECKING):",
    ": \\.\\.\\.(\\s*#.*)?$",
    "^ +\\.\\.\\.$",
    "-> ['\"]?NoReturn['\"]?:",
]

[tool.flake8]
ignore = ["W504", "E722"]
max_line_length = 80
exclude =  [".tox",
			"build",
			"dist",
			".git",
			"__pycache__",
			]
count = true
